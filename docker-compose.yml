version: '3.9'

networks:
  h4c-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

services:
  # MongoDB for user data
  mongodb:
    image: mongo:7.0
    container_name: h4c-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-h4c}
    volumes:
      - mongodb_data:/data/db
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    networks:
      - h4c-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: h4c-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - h4c-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # Discord bot service with proper build context
  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    container_name: h4c-bot
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGODB_DATABASE:-h4c}?authSource=admin
      - REDIS_URL=redis://redis:6379
      - BOT_TOKEN=${BOT_TOKEN}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ALGORAND_NODE_URL=${ALGORAND_NODE_URL:-https://mainnet-api.algonode.cloud}
      - NODELY_INDEXER_URL=${NODELY_INDEXER_URL:-https://mainnet-idx.algonode.cloud}
      - NODELY_INDEXER_API_KEY=${NODELY_INDEXER_API_KEY}
      - TINYMAN_API=${TINYMAN_API:-https://mainnet.analytics.tinyman.org/api/v1}
      - ENABLE_HTTP=${ENABLE_HTTP:-true}
      - PORT=3000
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "3000:3000"
    networks:
      - h4c-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Next.js web application
  web:
    build:
      context: .
      dockerfile: web/Dockerfile
    container_name: h4c-web
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3001
      - BOT_API_URL=http://bot:3000
    ports:
      - "3001:3001"
    networks:
      - h4c-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
